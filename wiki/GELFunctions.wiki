#summary List of functions supported by the Gridworks Expression Language

<wiki:toc max_depth="1" />

Function invocation in Gridworks expression language has 2 forms:

  * `functionName(arg0, arg1, ...)`
  * `arg0.functionName(arg1, ...)`

The second is a shortcut to make expressions easier to read. It's only syntactic sugar.

==Boolean functions==

===`and(boolean b1, boolean b2, ...)`===

Logically AND one or more booleans to yield a boolean.

===`or(boolean b1, boolean b2, ...)`===

Logically OR one or more booleans to yield a boolean.

===`not(boolean b)`===

Logically NOT a boolean to yield another boolean.

==String function==

===`chomp(string s, string sep)`===

Removes sep from the end of s if it's there, otherwise leave it alone.

===`substring(o, number from, optional number to)`===

If o is an array, returns o[from, to]. If o is a string, returns o.substring(from, to).

===`startsWith(string s, string sub)`===

Returns boolean indicating whether s starts with sub.

===`endsWith(string s, string sub)`===

Returns boolean indicating whether s ends with sub.

===`contains(string s, string sub)`===

Returns boolean indicating whether s contains sub.

===`indexOf(string s, string sub)`===

Returns the index of sub first ocurring in s as a number.

===`lastIndexOf(string s, string sub)`===

Returns the index of sub last ocurring in s as a number.

===`replace(string s, string f, string r)`===

Returns the string obtained by replacing f with r in s. f can be a regular expression, in which case r can also contain capture groups declared in f.

===`replaceChars(string s, string f, string r)`===

Returns the string obtained by replacing all chars in f with the char in s at that same position.

===`toLowercase(string s)`===

Returns s converted to lowercase.

===`toUppercase(string s)`===

Returns s converted to uppercase.

===`toTitlecase(string s)`===

Returns s converted to titlecase.

===`toNumber(o)`===

Returns o converted to a number.

===`split(s, sep)`===

Returns the array of strings obtained by splitting s with separator sep, which is either a string or a regular expression.

===`splitByCharType(s)`===

Returns an array of strings obtained by splitting s grouping consecutive chars by their unicode type.

===`splitByLengths(string s, number n, ...)`===

Returns the array of strings obtained by splitting s into substrings with the given lengths.

===`partition(string s, string or regex frag, optional boolean omitFragment)`===

Returns an array of strings [a,frag,b] where a is the string part before the first occurrence of frag in s and b is what's left. If omitFragment is true, frag is not returned.

===`rpartition(string s, string or regex frag, optional boolean omitFragment)`===

Returns an array of strings [a,frag,b] where a is the string part before the last occurrence of frag in s and b is what's left. If omitFragment is true, frag is not returned.

===`trim(string s)`===

Returns copy of the string, with leading and trailing whitespace omitted.

===`strip(string s)`===

Returns copy of the string, with leading and trailing whitespace omitted.

===`unescape(string s, string mode )`===

Unescapes all escaped parts of the string depending on the given escaping mode: 'html','xml','csv','url','javascript'.

===`md5(string s)`===

Returns the MD5 hash of s.

===`sha1(string s)`===

Returns the SHA-1 hash of s.

===`unicode(string s)`===

Returns an array of strings describing each character of s in their full unicode notation.

===`unicodeType(string s)`===

Returns an array of strings describing each character of s in their full unicode notation.

===`phonetic(string s, optional string encoding)`===

Returns the a phonetic encoding of s, optionally indicating which encoding to use (defaults to 'DoubleMetaphone').

===`reinterpret(string s, string encoder)`===

Returns s reinterpreted thru the given encoder.

===`diff(o1, o2, optional string timeUnit)`===

For strings, returns the portion where they differ. For dates, it returns the difference in given time units.

===`fingerprint(string s)`===

Returns the fingerprint of s, a derived string that aims to be a more canonical form of it (this is mostly useful for finding clusters of strings related to the same information).

===`ngramFfingerprint(string s, number n)`===

Returns the n-gram fingerprint of s.

==Array functions==

===`join(array a, string sep)`===

Returns the string obtained by joining the array a with the separator sep.

===`reverse(array a)`===

Reverses array a.

===`sort(array a)`===

Sorts array a.

===`sum(array a)`===

Return the sum of the numbers in the array a.

==String or Array functions==

===`slice(o, number from, optional number to)`===

If o is an array, returns o[from, to]. if o is a string, returns o.substring(from, to).

===`length(array or string o)`===

Returns the length of o.

==Math functions==

===`floor(number d)`===

Returns the floor of a number.

===`ceil(number d)`===

Returns the ceiling of a number.

===`round(number d)`===

Rounds a number to the nearest integer.

===`min(number d1, number d2)`===

Returns the smaller of two numbers.

===`max(number d1, number d2)`===

Returns the larger of two numbers.

===`mod(number d1, number d2)`===

Returns d1 modulus d2.

===`ln(number d)`===

Returns the natural log of d.

===`log(number d)`===

Returns the base 10 log of d.

===`exp(number d)`===

Returns e^d.

===`pow(number d, number e)`===

Returns d^e.

==Date functions==

===`now()`===

Returns the current time.

===`toDate(o, boolean month_first / format1, format2, ... )`===

Returns o converted to a date object.

All other arguments are optional:

  * `month_first`: set false if the date is formatted with the day before the month.
  * `formatN`: attempt to parse the date using an ordered list of possible formats. See [http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html SimpleDateFormat] for the syntax.

Examples: 
You can parse the cells "Nov-09" and "11/09" using `value.toDate2('MM/yy','MMM-yy').toString('yyyy-MM')`

===`toString(o, optional string format)`===

When o is a date, format specifies how to format the date.

===`diff(date d1, date d2, optional string timeUnit)`===

For dates, returns the difference in given time units.

===`inc(date d, number value, string unit (defaults to 'hour'))`===

Returns a date changed by the given amount in the given unit of time.

===`datePart(date d, string unit)`===

Returns part of a date.

==Other functions==

===type(o)===

Returns the type of the object o.

===uniques()===

(TODO: needs documentation from David)

===cross(cell c, string projectName, string columnName)===

Returns an array of zero or more rows in the project projectName for which the cells in their column columnName have the same content as cell c. The typical use case is creating a custom text facet with an expression like this:

{{{
  cell.cross("proj", "keyCol").cells.col2.value
}}} 
