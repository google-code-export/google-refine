#summary Google Refine Expression Language (GREL) Reference

Google Refine Expression Language (abbreviated as *GREL* in various places) is used to create custom facets, to create new columns based on existing ones, and to perform cell transformations.

==Syntax==

GREL has Javascript's syntax, but it only has expressions, not statements. There is no statement in GREL: that is, you won't find the typical statements such as `if-else`, `while`, `for` in Javascript in GREL, though there are some equivalent ways to do branching and looping using "controls".

Objects with fields can be accessed with the dot notation, e.g., `foo.bar`, or the square bracket notation, e.g., `foo["bar"]`. One deviation from Javascript syntax is the support for range indices: `aStringOrArray[from, to]`.

==Variables and Object Model==

Each expression is typically evaluated against one row at a time, and said to be based on a particular column. For example, when you try to create a custom facet on a column, that column is the "base column".

|| name || meaning ||
|| row || the current row ||
|| cells || the cells of the current row ||
|| cell || the cell in the base column of the current row ||
|| recon || the recon object of a cell returned from a reconciliation service or provider ||
|| record || one or more rows grouped together ||
|| value || the value of the cell in the base column of the current row ||


===Row===

A `row` object has a few fields, which can be accessed with a dot operator or with square brackets: `row.index`, `row["index"]`, much like in Javascript.

|| name || meaning ||
|| index || zero-based index of the current row ||
|| cells || the cells of the row, same as the "cells" variable above ||
|| starred || boolean, indicating if the row is starred ||
|| flagged || boolean, indicating if the row is flagged ||
|| record || the Record object containing the current row ||

===Cells===

The `cells` object, which can also be accessed as `row.cells`, has fields that correspond to the data column names. For example, `cells.Foo` returns a `cell` object representing the cell in the column named Foo of the current row. If the column name has spaces, use the square bracket method, e.g., `cells["Postal Code"]`.


===Cell===

A `cell` object has two fields

|| name || meaning ||
|| value || the value in the cell, which can be null, a string, a number, or a boolean ||
|| recon || an object encapsulating the reconciliation results for that cell ||

===Recon===

A `recon` object has a few fields

|| name || meaning || fields ||
|| judgment || a string that is one of: "matched", "new", "none" || 
|| matched || a boolean, true iff judgment is "matched" || 
|| match || null, or the recon candidate that has been matched against this cell || 
|| best || null, or the best recon candidate|| .id .name .type .score ||
|| features || an object encapsulating reconciliation features ||

A recon candidate object has a few fields: `id`, `guid`, `name`, `type`, and `score`, whose meanings are obvious. `type` is an array of type IDs.

A `features` object has the following fields:
  * typeMatch, nameMatch: booleans
  * nameLevenshtein, nameWordDistance: numbers

cell.recon.best also has a few fields: 'id', 'name', 'type', and 'score'

Facets based on reconciliation features can thus be created with such an expression as `cell.recon.features.typeMatch`.

===Record===

A `record` object encapsulates one or more rows that are grouped together. For example, the following data set has 2 records, the first grouping 2 rows and the second grouping 3 rows:

|| row || author || book || date ||
|| 1. || Neal Stephenson || Anathem || 2009 ||
|| 2. || || Snow Crash || 2000 ||  
|| 3. || J.K. Rowlings || Harry Potter and the Half-Blood Prince || 2006 ||
|| 4. || || Harry Potter and the Order of the Phoenix (Book 5) || 2005 ||
|| 5. || || Harry Potter and the Chamber of Secrets (Book 2) || 2000 || 

A `record` object has one field, `cells`, which can be used to access the zero or more cells in a particular column. For example, evaluating `row.record.cells.book.value` on row 2 returns `[ "Anathem", "Snow Crash" ]`.

----
===See Also===
----
  * [GRELBooleanFunctions GREL Boolean Functions]
  * [GRELStringFunctions GREL String Functions]
  * [GRELArrayFunctions GREL Array Functions]
  * [GRELStringArrayFunctions GREL String/Array Functions]
  * [GRELMathFunctions GREL Math Functions]
  * [GRELDateFunctions GREL Date Functions]
  * [GRELOtherFunctions GREL Other Functions]
  
  * [GRELControls GREL Controls]
  * [GRELRegex GREL Regular Expressions]