#summary Other functions supported by the Google Refine Expression Language (GREL)

===`type(o)`===

  Returns the type of the object o.  Such as `undefined`, `string`, `number`, etc.

===`hasField(o, string name)`===

  returns a boolean. Returns whether o has field name.

  `hasField(thing, fieldName)` returns true if and only if thing has a field named fieldName.

  For example, concerning the variable "cell"
{{{
  cell.hasField("value")
}}}
  should always return true.

===`jsonize(value)`===

  Quotes a value as a JSON literal value

===`parseJson(string s)`===

  Returns JSON Object. Parses a string as JSON

  `get` can also be used with `parseJson` like so:
{{{
parseJson(" { 'a' : 1 } ").get("a") returns 1
}}}

===`cross(cell c, string projectName, string columnName)`===

  Returns an array of zero or more rows in the project `projectName` for which the cells in their column `columnName` have the same content as `cell c`. The typical use case is creating a custom text facet with an expression like this:

{{{
  cell.cross("proj", "keyCol").cells.col2.value
}}}

  Example: Add a column in your project based on your Street Address column that you want to cross with a list of Street Addresses in your Customer's project and return their corresponding Zipcodes in your new column being added:

{{{
cell.cross("Customers_Branch_Offices_Project_File", "Their_STREET_ADDRESS_column").cells["Their_ZIPCODE_Column"].value
}}}

  and to return the Zipcode string itself, you can add `[0]` to the end of the above example which grabs the first part of the array.

===`facetCount(choiceValue, string facetExpression, string columnName)`===

  Returns the facet count corresponding to the given choice value

  TODO: Needs Example

----
===See Also===
----
  * [GRELBooleanFunctions GREL Boolean Functions]
  * [GRELStringFunctions GREL String Functions]
  * [GRELArrayFunctions GREL Array Functions]
  * [GRELMathFunctions GREL Math Functions]
  * [GRELDateFunctions GREL Date Functions]
  * [GRELOtherFunctions GREL Other Functions]
  
  * [GRELReference GREL Reference]
  * [GRELControls GREL Controls]
  * [GRELRegex GREL Regular Expressions]