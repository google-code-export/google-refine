#summary Other functions supported by the Google Refine Expression Language (GREL)

See also: [GRELFunctions All GREL functions].

===`type(o)`===

Returns the type of `o`,  such as `undefined`, `string`, `number`, etc.

===`hasField(o, string name)`===

Returns a boolean indicating whether `o` has a field called `name`. For example,  `cell.hasField("value")` always returns `true`, as every cell has a `value` field.

===`jsonize(value)`===

Quotes a value as a JSON literal value.

===`parseJson(string s)`===

Parses `s` as JSON. `get` can then be used with `parseJson`, e.g.,

{{{
parseJson(" { 'a' : 1 } ").get("a")
}}}

returns 1.

===`cross(cell c, string projectName, string columnName)`===

Returns an array of zero or more rows in the project `projectName` for which the cells in their column `columnName` have the same content as cell `c`. Consider 2 projects with the following data

*Project 1*

|| friend || address ||
|| john || 120 Main St. ||
|| mary || 50 Broadway Ave. ||
|| anne || 17 Morning Crescent ||

*Project 2*

|| gift || recipient ||
|| lamp || mary ||
|| clock || john ||

Now in Project 1, we want to add a column containing the addresses of the recipients, which are in Project 1. So we can invoke the command "Add column based on this column" on the "recipient" column in Project 2 and enter this expression

{{{
  cell.cross(Project 1", "friend").cells["address"].value[0]
}}}

*Project 2*

|| gift || recipient || address ||
|| lamp || mary || 50 Broadway Ave. ||
|| clock || john || 120 Main St. ||


===`facetCount(choiceValue, string facetExpression, string columnName)`===

Returns the facet count corresponding to the given choice value

  TODO: Needs Example