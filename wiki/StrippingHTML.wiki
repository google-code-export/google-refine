#summary Extracting & Converting HTML markup

= Introduction =

At some point you may have a dataset where one or more of the columns contain HTML markup.  The markup tags may interfere with data extraction/cleansing, word counts, etc.

It's very easy to create a new column with the HTML tags removed using Google Refine's support for regular expressions.

_Attribution note: the regular expression below comes from [http://haacked.com/archive/2004/10/25/usingregularexpressionstomatchhtml.aspx Phil Haack's blog]._


= Details =

Assume you have a column *Col1* containing HTML markup.  Click on the dropdown next to *Col1* and choose "Edit Column > Add Column Based On This Column...".  Pick a name for the new column, and use the following expression:

{{{
replace(value,/<\/?\w+((\s+\w+(\s*=\s*(?:".*?"|'.*?'|[^'">\s]+))?)+\s*|\s*)\/?>/,'')
}}}

Press OK, and you'll soon have a new column with the plain text extracted from *Col1*.
----
= Extract HTML attributes, text, links with integrated GREL commands =

*Note*: Now included in 2.1 version are HTML functions (Thanks Iain Sproat!) built upon [http://jsoup.org jsoup.org] which is a Java library built on [http://www.crummy.com/software/BeautifulSoup/ BeautifulSoup].

Useful Common Examples:

  Extract `<table>` rows from a `<div ID=content>`:
{{{
value.parseHtml().select("div#content")[0].select("tr")
}}}

  Simple Web Scrapping (Web Scraper) can be made in Google Refine with a pattern.  For example, you can add a new column based on an HTML page that has a bunch of links, where you need to Loop and Extract (using `forEach()`) all the `<a href=>` links based upon a regex pattern (such as those links containing a number digit \\d+) and join the array so that you can split and Fetch URLs on all those extracted links to scrape even more data off each HTML link with another Fetch URLs pass. :
{{{
forEach(value.parseHtml().select("a[href~=\\d+]"),e,e.htmlAttr("href")).join("SplitCharsGoHere")
}}}
----
= Using Jython and BeautifulSoup to handle Entity Extraction and HTML markup removal =

*Note:* For more on using Jython in expressions and other HTML/XML parsing utilities & recipes visit [Jython Using Jython as your Expression Language]

BeautifulSoup is a python library that offers powerful HTML parsing and operates very similarly to GREL syntax.

[http://www.crummy.com/software/BeautifulSoup/documentation.html Full documentation on BeautifulSoup website]

The following will strip out only the 4th table row text found on the first table in an HTML document using Jython as the expression language in Refine:

[http://google-refine.googlecode.com/issues/attachment?aid=3743089648310961680&name=ParseHTML_BeautifulSoup.png&token=31499509f849f514f584519cd59cd4fa&inline=1]

{{{
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(value)

gettablerow4 = soup.tr(text=True)[4]

return gettablerow4
}}}

These 4 lines can easily strip tables from an HTML page:

{{{
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(value)
text = soup.table.findAllNext(text=True)

return text
}}}
