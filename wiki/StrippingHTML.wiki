#summary Converting HTML markup to plain text

= Introduction =

At some point you may have a dataset where one or more of the columns contain HTML markup.  The markup tags may interfere with data extraction/cleansing, word counts, etc.

It's very easy to create a new column with the HTML tags removed using Google Refine's support for regular expressions.

_Attribution note: the regular expression below comes from [http://haacked.com/archive/2004/10/25/usingregularexpressionstomatchhtml.aspx Phil Haack's blog]._


= Details =

Assume you have a column *Col1* containing HTML markup.  Click on the dropdown next to *Col1* and choose "Edit Column > Add Column Based On This Column...".  Pick a name for the new column, and use the following expression:

{{{
replace(value,/<\/?\w+((\s+\w+(\s*=\s*(?:".*?"|'.*?'|[^'">\s]+))?)+\s*|\s*)\/?>/,'')
}}}

Press OK, and you'll soon have a new column with the plain text extracted from *Col1*.

----
= Using Jython and BeautifulSoup to handle Entity Extraction and HTML markup removal =

Before you begin, you may have to ensure that [Jython Jython is properly configured in Refine]

BeautifulSoup is a python library that offers powerful HTML parsing and operates very similarly to GREL syntax.

[http://www.crummy.com/software/BeautifulSoup/documentation.html Full documentation on BeautifulSoup website]

The following will strip out only the 4th table row text found on the first table in an HTML document using Jython as the expression language in Refine:

[http://google-refine.googlecode.com/issues/attachment?aid=3743089648310961680&name=ParseHTML_BeautifulSoup.png&token=31499509f849f514f584519cd59cd4fa&inline=1]

{{{
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(value)

gettablerow4 = soup.tr(text=True)[4]

return gettablerow4
}}}

These 4 lines can easily strip tables from an HTML page:

{{{
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(value)
text = soup.table.findAllNext(text=True)

return text
}}}
