== Using Jython as your Expression Language ==

Full docs on the Jython language are at the official site [http://www.jython.org http://www.jython.org].

*NOTE:* Jython is treated as an extension of Google Refine.  Currently with 2.0 SVN build, you have to modify Refine.java line 100 to the following:
{{{
System.setProperty("python.path","extensions/jython/module/MOD-INF/lib/jython");
}}}
to utilize the included Python libraries in trunk or additional ones you may want to download and use. 

After modifying Refine.java line 100, you can then use almost any Python (.py) files compatible with Jython 2.5.1 and drop them into the path `extensions/jython/module/MOD-INF/lib/jython`. For instance, download, extract and drop in `BeautifulSoup.py` and use it to parse and extract HTML tags or content using Jython as your expression language in Google Refine.

A few HTML parsing Python libraries to experiment with :

  # [http://docs.python.org/lib/module-HTMLParser.html]
  # [http://docs.python.org/lib/module-htmllib.html]
  # [http://www.crummy.com/software/BeautifulSoup/]

----

Expressions in jython must have a `return` statement, e.g.,

{{{
  return value[1:-1]
}}}
{{{
  return rowIndex%2
}}}
Fields have to be accessed using the bracket operator rather than the dot operator

{{{
  return cells["col1"]["value"]
}}}

Accesing the Levenshtein distance between the reconciled value and the cell value (?):

{{{
  return cell["recon"]["features"]["nameLevenshtein"]
}}}

It seems as though you can make use of a wide range of Jython structures.  To return the lower case of value (if the value is not null):

{{{
  if value is not None:
    return value.lower()
  else:
    return None
}}} 