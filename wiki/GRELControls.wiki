#summary Controls supported by the Google Refine Expression Language (GREL)


There are inline controls to support branching and essentially looping. They look like functions, but unlike functions, their arguments don't all get evaluated down to value before they get run. Each control decides which of their arguments to evaluate to value, and how.

===if===

{{{
if(eTest, eTrue, eFalse)
}}}
Expression `eTest` is evaluated to a value. If that value is true, then expression `eTrue` is evaluated and the result is the value of the whole `if` expression.  if(condition, if_true, if_false) is the same as (condition) ? if_true : if_false in C-like languages

Examples:
{{{
if(value.startsWith("A"), value.substring(1), value)
}}}
removes leading "A" from the cell's value, if any
{{{
if(cells.Synonym.value.startsWith("common"),cells.Synonym.value,null)
}}}
This statement when run as a text transform on a column, checks if cells in another Column named "Synonym" start with the term "common" and if so sets (copies) that value into the current columns' cells being transformed, otherwise sets the current columns' cells to null. This is equivalent to the notation (condition) ? if_true : if_false;

===with===

{{{
with(e1, v, e2)
}}}
Expression `e1` is evaluated to a value. A new environment is created in which that value is bound to the variable name `v`. In that new environment, expression `e2` is evaluated, and its result is the value of the whole `with` expression.

Examples:
{{{
with("twenty", s, s.substring(0, s.length() / 2))
}}}
returns "twe". If `with` is not used, then we have to repeat `"twenty"` like so:
{{{
"twenty".substring(0, "twenty".length() / 2)
}}}

===forEach===

{{{
forEach(eArray, v, eEach)
}}}
Expression `eArray` is evaluated, presumably to an array. Then for each element of that array, a new environment is created in which that element is bound to the variable name `v`, and in that new environment the expression `eEach` is evaluated, yielding a value. Thus, a value is generated from each element of that array, yielding another array, which is the result of the whole `forEach` expression.

Example:
{{{
forEach("one;two;three".split(";"), x, x.length())` returns `[ 3, 3, 5 ]
}}}

===forNonBlank===

{{{
forNonBlank(e, v, eNonBlank, eBlank)
}}}
Expression `e` is evaluated, yielding a value. If that value is blank (null or an empty string), then `eBlank` is evaluated and its result is the result of the whole `forNonBlank` expression. Otherwise, a new environment is created in which the value is bound to the variable name `v`. In that new environment, expression `eNonBlank` is evaluated and its result is the result of the whole `forNonBlank` expression.

{{{
forNonBlank(e, v, eNonBlank, eBlank)
}}}
is the same as
{{{
with(e, vTemp, if(isNonBlank(vTemp), with(vTemp, v, eNonBlank), eBlank))
}}}

Example:
{{{
forNonBlank("foo", n, n + "bar", "nothing")
}}}
returns "foobar".
{{{
forNonBlank("", n, n + "bar", "nothing")
}}}
returns "nothing".
{{{
forNonBlank("", n, n + "bar", n + "nothing")
}}}
returns null (`n` is not bound in `n + "nothing"`, causing that expression to fail).

===isBlank, isNonBlank, isNull, isNotNull, isNumeric===

`isX(e)` : evaluates expression `e` and returns whether its value is `X`.

Examples:
{{{
isBlank(value.partition(":",true)[1])
}}}
{{{
isNonBlank(value.partition(":",true)[1])
}}}
{{{
isNull(value)
}}}
{{{
isNotNull(value)
}}}
{{{
isNumeric(value)
}}}
