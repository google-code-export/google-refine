#summary Importing architecture

This is currently applicable only to the code in branches/new-importing-ui/.

= Introduction =

Google Refine has a sophisticated architecture for accommodating a diverse and extensible set of importable file formats and work flows. The formats range from simple CSV, TSV to fixed-width fields to line-based records to hierarchical XML and JSON. The work flows allow the user to preview and tweak many different import settings before creating the project. In some cases, such as XML and JSON, the user also has to select which elements in the data file to import. Additionally, a data file can also be an archive file (e.g., .zip) that contains many files inside; the user can select which of those files to import. Finally, extensions to Google Refine can inject functionalities into any part of this architecture.

=The Index Page and Action Areas=

The opening screen of Google Refine is implemented by the file refine/main/webapp/modules/core/index.vt and will be referred to here as the index page. Its default implementation contains 3 finger tabs labeled Create Project, Open Project, and Import Project. Each tab selects an "action area". The 3 default action areas are for, obviously, creating a new project, opening an existing project, and importing a project .tar file.

Extensions can add more action areas in Javascript. For example, this is how the Create Project action area is added (refine/main/webapp/modules/core/scripts/index/create-project-ui.js):

{{{
Refine.actionAreas.push({
  id: "create-project",
  label: "Create Project",
  uiClass: Refine.CreateProjectUI
});
}}}

The UI class is a constructor function that takes one argument, a jQuery-wrapped HTML element where the tab body of the action area should be rendered.

If your extension requires a very unique importing work flow, or a very novel feature that should be exposed on the index page, then add a new action area. Otherwise, try to use the existing work flows as much as possible.

=The Create Project Action Area=

The Create Project action area is itself extensible. Initially, it embeds a set of finger tabs corresponding to a variety of "source selection UIs": you can select a source of data by specifying a file on your computer, or you can specify the URL to a publicly accessible data file or data feed, or you can paste in from the clipboard a chunk of data.

There are actually 3 points of extension in the Create Project action area, and the first is invisible.

==Importing Controllers==

The Create Project action area manages a list of "importing controllers". Each controller follows a particular work flow. There is one default importing controller (refine/main/webapp/modules/core/scripts/index/default-importing-sources/controller.js). Its work flow assumes that the data should be retrieved and cached in whole, and then it's processed in order to generate a preview for the user to inspect. (If the data should not be retrieved and cached in whole before previewing, then another importing controller is needed.)

An importing controller is just logic, but it can manifest itself by registering one or more data source UIs and one or more custom panels in the Create Project action area.

An extension can register any number of importing controller. The default importing controller is registered like so (refine/main/webapp/modules/core/scripts/index/default-importing-sources/controller.js)

{{{
Refine.CreateProjectUI.controllers.push(Refine.DefaultImportingController);
}}}

Each controller is just a constructor function that takes an object representing the Create Project action area (usually named `createProjectUI`). The controller is expected to use that object to register data source UIs and/or create custom panels. The controller is not expected to have any particular interface method.

==Data Source Selection UIs==

Data source selection UIs are another point of extensibility in the Create Project action area. As mentioned previously, by default there are 3 data source UIs. Those are added by the default importing controller.

Extensions can also add their own data source UIs. A data source selection UI object can be registered like so

{{{
createProjectUI.addSourceSelectionUI({
  label: "This Computer",
  id: "local-computer-source",
  ui: theDataSourceSelectionUIObject
});
}}}

`theDataSourceSelectionUIObject` is an object that has the following member methods:

  * `attachUI(bodyDiv)`
  * `focus()`

If you want to install a data source selection UI that is managed by the default importing controller, then register its UI class with the default importing controller, like so (refine/main/webapp/modules/core/scripts/index/default-importing-sources/sources.js):

{{{
Refine.DefaultImportingController.sources.push({
    "label": "This Computer",
    "id": "upload",
    "uiClass": ThisComputerImportingSourceUI
});
}}}

The default importing controller will assume that the `uiClass` field is a constructor function and call it with one argument--the controller object itself. See refine/main/webapp/modules/core/scripts/index/default-importing-sources/sources.js for examples of such a source selection UI.
